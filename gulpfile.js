var fs = require('fs');
var glob = require('glob');
var ncp = require('ncp').ncp;
var path = require('path');
var yaml = require('js-yaml');
var gulp = require('gulp');
var clean = require('gulp-clean');
var runSequence = require('gulp-run-sequence');
var shell = require('gulp-shell');

var util = require('./lib/util.js');

var config = JSON.parse(fs.readFileSync('config.json'));

gulp.task('clean-yml', function () {
  return gulp.src(config.jsdoc.dest, { read: false })
    .pipe(clean());
})

gulp.task('clean-html', function () {
  return gulp.src(config.docfx.dest, { read: false })
    .pipe(clean());
})

gulp.task('yml-package', function () {
  if (!fs.existsSync(config.jsdoc.dest)) {
    fs.mkdirSync(config.jsdoc.dest);
  }
  util.generateYamlFromPackageJson('../azure-sdk-for-node/lib/services/webSiteManagement/package.json', path.join(config.jsdoc.dest, '{_packageName}'), config);
});

gulp.task('yml-js', function () {
  if (!fs.existsSync(config.jsdoc.dest)) {
    fs.mkdirSync(config.jsdoc.dest);
  }
  util.generateYamlFromJs('../azure-sdk-for-node/lib/azure.js', path.join(config.jsdoc.dest, 'azure'), config);
});

gulp.task('yml-azure', function () {
  // 1. get all package.json
  var packageJsons = glob.sync(path.join(config.src, '**/package.json'));

  // 2. generate yml and md for all packages
  if (!fs.existsSync(config.jsdoc.dest)) {
    fs.mkdirSync(config.jsdoc.dest);
  }
  packageJsons.forEach(function (p) {
    util.generateYamlFromPackageJson(p, path.join(config.jsdoc.dest, '{_packageName}'), config);
  })

  // 3. generate yml for azure.js and copy root README.md
  util.generateYamlFromJs(config.rootJs, path.join(config.jsdoc.dest, ''), config);
  if (fs.existsSync(config.readme)) {
    console.log('copy from ' + config.readme + ' to ' + path.join(config.jsdoc.dest, 'index.md'));
    fs.createReadStream(config.readme).pipe(fs.createWriteStream(path.join(config.jsdoc.dest, 'index.md')));
    console.log('finish copy');
  }

  // 4. copy documentation
  console.log('copy documentation from ' + path.join(config.repoRoot, config.doc) + ' to ' + path.join(config.jsdoc.dest, config.doc));
  ncp(path.join(config.repoRoot, config.doc), path.join(config.jsdoc.dest, config.doc), function (err) {
    if (err) {
      return console.error(err);
    }
    console.log('finish copy');
  })

  // 5. generate root toc
  // 5.1 load root toc generated by azure.js
  console.log('load ' + path.join(config.jsdoc.dest, 'toc.yml'));
  var toc = yaml.safeLoad(fs.readFileSync(path.join(config.jsdoc.dest, 'toc.yml')));
  console.log('finish load');
  // 5.2 load sub packages names
  packageNames = [];
  packageJsons.forEach(function (p) {
    packageNames.push(JSON.parse(fs.readFileSync(p)).name);
  })
  // 5.3 group sub packages
  var itemsByType = function (type) {
    return packageNames.filter(function (value) {
      return value.indexOf(type) > -1;
    });
  };
  var armItems = itemsByType('-arm-');
  var asmItems = itemsByType('-asm-');
  var commonItems = itemsByType('-common');
  var serviceItems = packageNames.filter(function (item) {
    return !(armItems.indexOf(item) > -1 || asmItems.indexOf(item) > -1 || commonItems.indexOf(item) > -1);
  }).sort();
  // 5.4 generate toc for sub packages
  var buildTocItems = function (keys) {
    return keys.sort().map(function (key) {
      var packageToc = path.join(config.jsdoc.dest, key, 'toc.yml');
      if (fs.existsSync(packageToc)) {
        href = path.join(key, 'toc.yml');
      } else {
        href = key + '/';
      }
      var packageIndex = path.join(config.jsdoc.dest, key, 'index.md');
      if (fs.existsSync(packageIndex)) {
        topicHref = path.join(key, 'index.md');
      } else {
        topicHref = undefined;
      }
      return {
        name: key,
        href: href,
        topicHref: topicHref
      }
    });
  };

  var groupedToc = [
    {
      name: 'Azure Services',
      items: buildTocItems(serviceItems)
    },
    {
      name: 'Resource Management',
      items: buildTocItems(armItems)
    },
    {
      name: 'Service Management',
      items: buildTocItems(asmItems)
    },
    {
      name: 'Common Libs',
      items: buildTocItems(commonItems)
    }
  ];
  // 5.5 combine sub package toc with root toc and save
  toc.unshift({ name: 'Azure SDK Packages', items: groupedToc });
  console.log('generate root toc.yml');
  fs.writeFileSync(path.join(config.jsdoc.dest, 'toc.yml'), yaml.safeDump(toc));
});

gulp.task('docfx', shell.task([config.docfx.toolPath + ' ' + config.docfx.config]));

gulp.task('clean', ['clean-yml', 'clean-html']);

gulp.task('default', function (cb) {
  runSequence('yml-azure', 'docfx');
});